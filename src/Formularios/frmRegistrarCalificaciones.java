/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * frmRegistrarCalificaciones.java
 *
 * Created on 12-feb-2012, 23:51:14
 */
package Formularios;

import Controladores.AparienciaColumnas;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import Controladores.ModeloCalificaciones;
import Controladores.ModeloCalificacionesSubModulos;
import Controladores.ctrlAsignaturas;
import Controladores.ctrlCalificaciones;
import Controladores.ctrlCalificacionesSubmodulo;
import Controladores.ctrlCarreras;
import Controladores.ctrlCicloEscolar;
import Controladores.ctrlGrupos;
import Controladores.ctrlOfertaAcademica;
import Entidades.Asignaturas;
import Entidades.Calificaciones;
import Entidades.CalificacionesSubmodulo;
import Entidades.CicloEscolar;
import Entidades.Grupos;
import Entidades.OfertaAcademica;
import Entidades.Personal;
import Entidades.Usuarios;
import java.util.Calendar;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.TableColumn;

/**
 *
 * @author Last Develop
 */
public class frmRegistrarCalificaciones extends javax.swing.JDialog {
ctrlCarreras ctrlcarreras;
ctrlGrupos ctrlgrupos=new ctrlGrupos();
ctrlCicloEscolar ctrlciclos=new ctrlCicloEscolar();
private Usuarios usuario=null;
 private Asignaturas seleccionada=null;
CicloEscolar ciclo=null;
private ArrayList<Grupos> listagrupos=null;

    public Usuarios getUsuario() {
        return usuario;
    }

    public void setUsuario(Usuarios usuario) {
        this.usuario = usuario;
    }


    /** Creates new form frmRegistrarCalificaciones */
    public frmRegistrarCalificaciones(java.awt.Frame parent, boolean modal) throws SQLException, ClassNotFoundException {
        super(parent, modal);
        initComponents();
        
         ctrlCicloEscolar ctrlciclo=new ctrlCicloEscolar();
          ciclo=ctrlciclo.getCicloActivo();
             listagrupos= ctrlgrupos.getGruposListasAsistencia(ciclo.getIdCiclo());
             this.cmbGrupos.setModel(  ctrlgrupos.getComboGruposInscripciones(listagrupos));
             this.lblprofesor.setText("");
             this.cmbUnidad.setVisible(false);
             //AparienciaColumnas ap=new AparienciaColumnas();
            //this.jTableCalificaciones.setDefaultRenderer(Float.class, ap);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        cmbGrupos = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        cmbAsignaturas = new javax.swing.JComboBox();
        jLabel4 = new javax.swing.JLabel();
        lblprofesor = new javax.swing.JLabel();
        btnGuardar = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cmbUnidad = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCalificaciones = new org.jdesktop.swingx.JXTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("CAPTURA DE CALIFICACIONES");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Datos del Grupo"));

        cmbGrupos.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbGruposItemStateChanged(evt);
            }
        });
        cmbGrupos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbGruposActionPerformed(evt);
            }
        });

        jLabel2.setText(" Semestre-Grupo-Carrera:");

        jLabel3.setText("Asignatura:");

        cmbAsignaturas.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbAsignaturasItemStateChanged(evt);
            }
        });
        cmbAsignaturas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbAsignaturasActionPerformed(evt);
            }
        });

        jLabel4.setText("Profesor:");

        lblprofesor.setText("profe");

        btnGuardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/guardar.png"))); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.setToolTipText("Guardar  Cambios");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/printer.png"))); // NOI18N
        btnImprimir.setText("Imprimir");

        jSpinner1.setModel(new javax.swing.SpinnerNumberModel(0, 0, 3, 1));
        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });

        jLabel1.setText("Seleccionar un Bimestre:");

        jLabel5.setText("Tipo: 1.-Parcial, 2.-Recuperaci√≥n, 3.-Extraordinario, 4.-Intersemestral, 5.-Recursamiento");

        cmbUnidad.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbGrupos, 0, 313, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 99, Short.MAX_VALUE)
                                .addComponent(btnGuardar))
                            .addComponent(lblprofesor, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                            .addComponent(cmbAsignaturas, 0, 313, Short.MAX_VALUE))))
                .addGap(18, 18, 18)
                .addComponent(btnImprimir)
                .addGap(387, 387, 387))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbGrupos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(cmbAsignaturas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(lblprofesor))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(btnGuardar)
                    .addComponent(btnImprimir)
                    .addComponent(cmbUnidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel5))
        );

        jScrollPane1.setViewportView(jTableCalificaciones);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 787, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(16, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void cmbGruposActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbGruposActionPerformed
       
    
}//GEN-LAST:event_cmbGruposActionPerformed

private void cmbGruposItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbGruposItemStateChanged
 // TODO add your handling code here:
   try {
            // TODO add your handling code here:
               ctrlOfertaAcademica ctrloferta=new ctrlOfertaAcademica();
               Grupos g=(Grupos) this.cmbGrupos.getSelectedItem();
               ArrayList<OfertaAcademica> listaoferta= ctrloferta.getOfertaAcademica(g.getIdGrupo(), 1);
               
               this.cmbAsignaturas.setModel( ctrloferta.getAsignaturasGrupo(listaoferta));
               
               
        } catch (SQLException ex) {
            Logger.getLogger(frmGenerarListasAsistencias.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(frmGenerarListasAsistencias.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_cmbGruposItemStateChanged

private void cmbAsignaturasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbAsignaturasActionPerformed
 // TODO add your handling code here:
}//GEN-LAST:event_cmbAsignaturasActionPerformed

private void cmbAsignaturasItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbAsignaturasItemStateChanged
        try {
            // TODO add your handling code here:
               OfertaAcademica e=(OfertaAcademica) this.cmbAsignaturas.getSelectedItem();
               
               ctrlOfertaAcademica ctrloferta=new ctrlOfertaAcademica();
               Grupos g=(Grupos) this.cmbGrupos.getSelectedItem();
             // System.out.println(  e.getAsignatura().getIdAsignatura()); 
               
               Personal persona =ctrloferta.getPersonalAsignatura(g.getIdGrupo(),e.getAsignatura().getIdAsignatura());
               
               
               if(persona!=null)
               {
               this.lblprofesor.setText( persona.getNombre() + " " + persona.getApePaterno()+ " " + persona.getApeMaterno());
               }
               else
               {
               this.lblprofesor.setText("Profesor por Designar");
               }
               
               ctrlAsignaturas ctrlas=new ctrlAsignaturas();
               ArrayList<Asignaturas> listaas= ctrlas.getAsignaturas(e.getAsignatura().getIdAsignatura() , 0,0, 0, 9);
              seleccionada= listaas.get(0);
               
               if(seleccionada.getIdModulo()==0) //La asignatura no es un modulo
               {
                   ctrlCalificaciones ctrlcalificaciones=new ctrlCalificaciones();
                   ArrayList<Calificaciones> listaCalifi= ctrlcalificaciones.getAlumnosAsignatura( seleccionada.getIdAsignatura(),e.getIdOfertaAcademica());
                   this.jTableCalificaciones.setModel( ctrlcalificaciones.getModeloTabla(listaCalifi));
                   this.jTableCalificaciones.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
                
                
                this.jTableCalificaciones.getColumn(0).setPreferredWidth(30);
                this.jTableCalificaciones.getColumn(1).setPreferredWidth(240);
                this.jTableCalificaciones.getColumn(2).setPreferredWidth(120);
                
                this.jTableCalificaciones.getColumn(3).setPreferredWidth(42);
                this.jTableCalificaciones.getColumn(4).setPreferredWidth(42);
                this.jTableCalificaciones.getColumn(5).setPreferredWidth(42);
                this.jTableCalificaciones.getColumn(6).setPreferredWidth(42);
                this.jTableCalificaciones.getColumn(7).setPreferredWidth(42);
                this.jTableCalificaciones.getColumn(8).setPreferredWidth(42);
                this.jTableCalificaciones.getColumn(9).setPreferredWidth(42);
                this.jTableCalificaciones.getColumn(10).setPreferredWidth(42);
                this.jTableCalificaciones.getColumn(11).setPreferredWidth(42);
                 int bimestre=Integer.parseInt( this.jSpinner1.getValue().toString());
                 this.jSpinner1.setVisible(true);
                 this.cmbUnidad.setVisible(false);
                //this.MostrarOcultarColumnas(bimestre);
                
                
                
               }
               else
               {
                ctrlCalificacionesSubmodulo ctrlcalifmodulos=new ctrlCalificacionesSubmodulo();
              
               //System.out.println(e.getAsignatura().getIdAsignatura());
                ArrayList<CalificacionesSubmodulo> listaCali=ctrlcalifmodulos.getAlumnosAsignatura(e.getAsignatura().getIdAsignatura(), e.getIdOfertaAcademica());
                int i= listaCali.get(0).getUnidadaprendizaje().size();
              //System.out.println("Dimensi√≥n de la sunidades: "+ i);
                this.cmbUnidad.removeAllItems();
                this.cmbUnidad.setVisible(true);
                this.jSpinner1.setVisible(false);
                this.jLabel1.setText("Selecciona una Unidad");
                for(int j=0;j<=i;j++)
                {
                    this.cmbUnidad.addItem(j);
                }
                 ModeloCalificacionesSubModulos modelo=ctrlcalifmodulos.getModeloCalificionesSubmodulos(listaCali);
                 this.jTableCalificaciones.setModel(modelo);
                  this.TotalColumnas(i);
               }
               
               
        } catch (SQLException ex) {
            Logger.getLogger(frmGenerarListasAsistencias.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(frmGenerarListasAsistencias.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_cmbAsignaturasItemStateChanged



public void MostrarOcultarColumnas(int bimestre)
{
    TableColumn columna;
 switch (bimestre) //son 12 columnas del 0 al 11, 0,1,2 son datos que no se deben ocultar
 {
     case 0:
         //System.out.println("Entro en 0" +bimestre);
         //this.jTableCalificaciones.setAutoResizeMode(JTable.AUTO_RESIZE_SUBSEQUENT_COLUMNS);
                
                
                this.jTableCalificaciones.getColumn(0).setPreferredWidth(30);
                this.jTableCalificaciones.getColumn(1).setPreferredWidth(240);
                this.jTableCalificaciones.getColumn(2).setPreferredWidth(120);
                
                columna = this.jTableCalificaciones. getColumnModel().getColumn(3);
                columna.setMaxWidth(42);
                columna.setMinWidth(42);
                columna.setPreferredWidth(42);
                
                columna = this.jTableCalificaciones. getColumnModel().getColumn(4);
                columna.setMaxWidth(42);
                columna.setMinWidth(42);
                columna.setPreferredWidth(42);
                
                columna = this.jTableCalificaciones. getColumnModel().getColumn(5);
                columna.setMaxWidth(42);
                columna.setMinWidth(42);
                columna.setPreferredWidth(42);
                //this.jTableCalificaciones.getColumn(3).setPreferredWidth(100);
                columna = this.jTableCalificaciones. getColumnModel().getColumn(6);
                columna.setMaxWidth(42);
                columna.setMinWidth(42);
                columna.setPreferredWidth(42);
                
                columna = this.jTableCalificaciones. getColumnModel().getColumn(7);
                columna.setMaxWidth(42);
                columna.setMinWidth(42);
                columna.setPreferredWidth(42);
                
                columna = this.jTableCalificaciones. getColumnModel().getColumn(8);
                columna.setMaxWidth(42);
                columna.setMinWidth(42);
                columna.setPreferredWidth(42);
                
                columna = this.jTableCalificaciones. getColumnModel().getColumn(9);
                columna.setMaxWidth(42);
                columna.setMinWidth(42);
                columna.setPreferredWidth(42);
                columna = this.jTableCalificaciones. getColumnModel().getColumn(10);
                columna.setMaxWidth(42);
                columna.setMinWidth(42);
                columna.setPreferredWidth(42);
                columna = this.jTableCalificaciones. getColumnModel().getColumn(11);
                columna.setMaxWidth(42);
                columna.setMinWidth(42);
                columna.setPreferredWidth(42);
         break;
                //this.jTableCalificaciones.doLayout();
         
     case 1:
                
                columna = this.jTableCalificaciones. getColumnModel().getColumn(6);
                columna.setMaxWidth(0);
                columna.setMinWidth(0);
                columna.setPreferredWidth(0);
                columna = this.jTableCalificaciones. getColumnModel().getColumn(7);
                columna.setMaxWidth(0);
                columna.setMinWidth(0);
                columna.setPreferredWidth(0);
                columna = this.jTableCalificaciones. getColumnModel().getColumn(8);
                columna.setMaxWidth(0);
                columna.setMinWidth(0);
                columna.setPreferredWidth(0);
                columna = this.jTableCalificaciones. getColumnModel().getColumn(9);
                columna.setMaxWidth(0);
                columna.setMinWidth(0);
                columna.setPreferredWidth(0);
                columna = this.jTableCalificaciones. getColumnModel().getColumn(10);
                columna.setMaxWidth(0);
                columna.setMinWidth(0);
                columna.setPreferredWidth(0);
                columna = this.jTableCalificaciones. getColumnModel().getColumn(11);
                columna.setMaxWidth(0);
                columna.setMinWidth(0);
                columna.setPreferredWidth(0);
                //this.jTableCalificaciones.doLayout();
         break;
     case 2:
                columna = this.jTableCalificaciones. getColumnModel().getColumn(3);
                columna.setMaxWidth(0);
                columna.setMinWidth(0);
                columna.setPreferredWidth(0);
                columna = this.jTableCalificaciones. getColumnModel().getColumn(4);
                columna.setMaxWidth(0);
                columna.setMinWidth(0);
                columna.setPreferredWidth(0);
                columna = this.jTableCalificaciones. getColumnModel().getColumn(5);
                columna.setMaxWidth(0);
                columna.setMinWidth(0);
                columna.setPreferredWidth(0);
               
                columna = this.jTableCalificaciones. getColumnModel().getColumn(6);
                columna.setMaxWidth(42);
                columna.setMinWidth(42);
                columna.setPreferredWidth(42);
                columna = this.jTableCalificaciones. getColumnModel().getColumn(7);
                columna.setMaxWidth(42);
                columna.setMinWidth(42);
                columna.setPreferredWidth(42);
                columna = this.jTableCalificaciones. getColumnModel().getColumn(8);
                columna.setMaxWidth(42);
                columna.setMinWidth(42);
                columna.setPreferredWidth(42);
                
                
                
                
                columna = this.jTableCalificaciones. getColumnModel().getColumn(9);
                columna.setMaxWidth(0);
                columna.setMinWidth(0);
                columna.setPreferredWidth(0);
                columna = this.jTableCalificaciones. getColumnModel().getColumn(10);
                columna.setMaxWidth(0);
                columna.setMinWidth(0);
                columna.setPreferredWidth(0);
                columna = this.jTableCalificaciones. getColumnModel().getColumn(11);
                columna.setMaxWidth(0);
                columna.setMinWidth(0);
                columna.setPreferredWidth(0);
               // this.jTableCalificaciones.doLayout();
         break;
         
     case 3:
          columna = this.jTableCalificaciones. getColumnModel().getColumn(3);
                columna.setMaxWidth(0);
                columna.setMinWidth(0);
                columna.setPreferredWidth(0);
                columna = this.jTableCalificaciones. getColumnModel().getColumn(4);
                columna.setMaxWidth(0);
                columna.setMinWidth(0);
                columna.setPreferredWidth(0);
                columna = this.jTableCalificaciones. getColumnModel().getColumn(5);
                columna.setMaxWidth(0);
                columna.setMinWidth(0);
                columna.setPreferredWidth(0);
               
                columna = this.jTableCalificaciones. getColumnModel().getColumn(6);
                columna.setMaxWidth(0);
                columna.setMinWidth(0);
                columna.setPreferredWidth(0);
                columna = this.jTableCalificaciones. getColumnModel().getColumn(7);
                columna.setMaxWidth(0);
                columna.setMinWidth(0);
                columna.setPreferredWidth(0);
                columna = this.jTableCalificaciones. getColumnModel().getColumn(8);
                columna.setMaxWidth(0);
                columna.setMinWidth(0);
                columna.setPreferredWidth(0);
                
                columna = this.jTableCalificaciones. getColumnModel().getColumn(9);
                columna.setMaxWidth(42);
                columna.setMinWidth(42);
                columna.setPreferredWidth(42);
                columna = this.jTableCalificaciones. getColumnModel().getColumn(10);
                columna.setMaxWidth(42);
                columna.setMinWidth(42);
                columna.setPreferredWidth(42);
                columna = this.jTableCalificaciones. getColumnModel().getColumn(11);
                columna.setMaxWidth(42);
                columna.setMinWidth(42);
                columna.setPreferredWidth(42);
                
         break;
         
 }
     
}


private void MostrarOcultarUnidades(int unidad) 
{
   this.jTableCalificaciones.getColumn(0).setPreferredWidth(30);
   this.jTableCalificaciones.getColumn(1).setPreferredWidth(240);
   this.jTableCalificaciones.getColumn(2).setPreferredWidth(120);
   
   
}

private void TotalColumnas(int total)
{
    this.jTableCalificaciones.getColumn(0).setPreferredWidth(30);
    this.jTableCalificaciones.getColumn(1).setPreferredWidth(240);
    this.jTableCalificaciones.getColumn(2).setPreferredWidth(120);
    int limite=total*4+3;
    //System.out.println("Unidades " + total + " limite--"+ limite);
    for(int k=3;k<limite;k++)
    {
     this.jTableCalificaciones.getColumn(k).setPreferredWidth(42);
    }
    for(int z=limite;z<43;z++)
    {
    this.jTableCalificaciones.getColumn(z).setMinWidth(0);    
    this.jTableCalificaciones.getColumn(z).setMaxWidth(0);
    this.jTableCalificaciones.getColumn(z).setPreferredWidth(0);
    }
    this.jTableCalificaciones.getColumn(43).setPreferredWidth(120);
    this.jTableCalificaciones.getColumn(44).setPreferredWidth(120);
}
private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
    boolean r=false;
    int i;
    int respuesta=JOptionPane.showConfirmDialog(this, "¬øDesea Guardar los Cambios?");
    if(respuesta==JOptionPane.YES_OPTION)
    {    
    try {
                       
            if(this.jTableCalificaciones.getRowCount()>0)
            {
             /*Debemos obtener que tipo de calificacion se va a ala*/  
                
                if(seleccionada!=null)
                {
                  if(seleccionada.getIdModulo()==0 )//Es una asignatura
                  {
                       ModeloCalificaciones mod=   (ModeloCalificaciones) this.jTableCalificaciones.getModel();
                      ctrlCalificaciones ctrlcalif=new ctrlCalificaciones();
                      int bimestre=Integer.parseInt(this.jSpinner1.getValue().toString());
                        if(bimestre>0)
                        {
                        ArrayList<Calificaciones>lista =mod.getListaCalificaciones();
                        if(lista.size()>0)
                        {
                          for( i=0;i<lista.size();i++)   
                            {
                        //System.out.println(lista.get(i).getId_calificacion());
                            lista.get(i).setId_usuario1(this.usuario.getId_usuario());
                            lista.get(i).setId_usuario2(this.usuario.getId_usuario());
                            lista.get(i).setId_usuario3(this.usuario.getId_usuario());
                     
                            }
                           r= ctrlcalif.updateCalificaciones(mod.getListaCalificaciones(), bimestre);
                        }
                  
                       }//Pregunta por el bimestre
                      else
                        {
                         JOptionPane.showMessageDialog(this, "Debe Seleccionar el Bimestre a Registrar","Aviso",JOptionPane.WARNING_MESSAGE);
                        }
                
              
                        
                     
                   
                  }
                  else //Es un submodulo
                  {
                   
                   int unidad=Integer.parseInt(this.cmbUnidad.getSelectedItem().toString());
                   if(unidad>0)//La unidad debe ser mayo a cero
                   {
                     ModeloCalificacionesSubModulos m=(ModeloCalificacionesSubModulos) this.jTableCalificaciones.getModel();
                     ArrayList<CalificacionesSubmodulo> listas=m.getListaCalificaciones();
                     ctrlCalificacionesSubmodulo ctrlcalsm=new ctrlCalificacionesSubmodulo();
                     if(listas.size()>0)
                     {
                         for(i=0;i<listas.size();i++ )
                         {
                             listas.get(i).setId_usuario1(this.usuario.getId_usuario());
                             listas.get(i).setId_usuario2(this.usuario.getId_usuario());
                             listas.get(i).setId_usuario3(this.usuario.getId_usuario());
                             listas.get(i).setId_usuario4(this.usuario.getId_usuario());
                             listas.get(i).setId_usuario5(this.usuario.getId_usuario());
                             listas.get(i).setId_usuario6(this.usuario.getId_usuario());
                             listas.get(i).setId_usuario7(this.usuario.getId_usuario());
                             listas.get(i).setId_usuario8(this.usuario.getId_usuario());
                             listas.get(i).setId_usuario9(this.usuario.getId_usuario());
                             listas.get(i).setId_usuario10(this.usuario.getId_usuario());
                         }
                         r=ctrlcalsm.updateCalificacionesSubmodulos(listas, unidad);
                     }
                   }
                   else //Debe seleccionar una unidad
                   {
                   JOptionPane.showMessageDialog(this, "Debe Seleccionar la Unidad de Aprendizaje a Registrar","Aviso",JOptionPane.WARNING_MESSAGE);
                   }
                  }//Cierr del Submodulo
                   if(r)
                    {
                    JOptionPane.showMessageDialog(this, "Los Cambios Se Guardaron de Forma Exitosa","Aviso",JOptionPane.INFORMATION_MESSAGE);
                    //this.dispose();
                    }
                    else
                        {
                    JOptionPane.showMessageDialog(this, "Los Cambios NO se Guardaron Debido a un ERROR","Aviso",JOptionPane.ERROR_MESSAGE);
                        }
               }
                else //No tiene una asignatura seleccionada
                {
                 JOptionPane.showMessageDialog(this, "Debe Seleccionar una Asignatura","Aviso",JOptionPane.WARNING_MESSAGE);
                }
              
            }
              else
               {
                   JOptionPane.showMessageDialog(this, "No Existen Calificaciones por Registrar","Aviso",JOptionPane.WARNING_MESSAGE);
               }
    
        } catch (SQLException ex) {
            Logger.getLogger(frmRegistrarCalificaciones.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(frmRegistrarCalificaciones.class.getName()).log(Level.SEVERE, null, ex);
        }
      }/*Fin del JOptionPane*/
}//GEN-LAST:event_btnGuardarActionPerformed

private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        
            // TODO add your handling code here:
                                 
               int  bimestre= Integer.parseInt( this.jSpinner1.getValue().toString());
                  
                   
           this.MostrarOcultarColumnas(bimestre);
                           //this.MostrarOcultarColumnas(bimestre);
        
}//GEN-LAST:event_jSpinner1StateChanged




    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmRegistrarCalificaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmRegistrarCalificaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmRegistrarCalificaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmRegistrarCalificaciones.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                try {
                    frmRegistrarCalificaciones dialog = new frmRegistrarCalificaciones(new javax.swing.JFrame(), true);
                    dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                        @Override
                        public void windowClosing(java.awt.event.WindowEvent e) {
                            System.exit(0);
                        }
                    });
                    dialog.setVisible(true);
                } catch (SQLException ex) {
                    Logger.getLogger(frmRegistrarCalificaciones.class.getName()).log(Level.SEVERE, null, ex);
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(frmRegistrarCalificaciones.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnImprimir;
    private javax.swing.JComboBox cmbAsignaturas;
    private javax.swing.JComboBox cmbGrupos;
    private javax.swing.JComboBox cmbUnidad;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private org.jdesktop.swingx.JXTable jTableCalificaciones;
    private javax.swing.JLabel lblprofesor;
    // End of variables declaration//GEN-END:variables
}
